[package]
name = "minifb-web-demo"
version = "0.1.0"
authors = ["dc"]
edition = "2018"

[lib]
crate-type = ["cdylib"]

[features]
default = [ "instant/wasm-bindgen" ]


[dependencies]
console_error_panic_hook = "0.1.6"
minifb = { version = '0.19.2' , default-features = false, features = ["web"]}
wasm-bindgen = "0.2.71"
web-sys = "0.3.48"
instant = "0.1"

[patch.crates-io]
minifb = { git = 'https://github.com/dc740/rust_minifb.git', branch = 'wasm_websys_wip' }

[package.metadata.wasm-pack.profile.dev]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = false

[package.metadata.wasm-pack.profile.profiling]
wasm-opt = false

# `wasm-opt` is on by default in for the release profile, but it can be
# disabled by setting it to `false`
[package.metadata.wasm-pack.profile.release]
wasm-opt = false

